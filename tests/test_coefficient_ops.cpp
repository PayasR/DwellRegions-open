#include "../include/coefficient.hpp"

#include <iostream>
#include <random>
#include <vector>

using DwellRegions::Coefficient;

auto
generate_random_coefficients(size_t num_points)
{
  std::random_device rd;  // Will be used to obtain a seed for the random number engine
  std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
  std::uniform_real_distribution<> distribution(0.0, 180.0);
  std::vector<Coefficient> coefficients;
  coefficients.reserve(num_points);

  for (size_t i = 0; i < num_points; i++) {
    // Use dis to transform the random unsigned int generated by gen into a
    // double in [1, 2). Each call to dis(gen) generates a new random double
    coefficients.emplace_back(DwellRegions::Coefficient::from_double(distribution(gen)));
  }

  return coefficients;
}

void
print_coefficients(const std::vector<Coefficient>& coefficients)
{
  for (const auto& c : coefficients) {
    std::cout << c.val() << " " << c.as_float() << std::endl;
  }
}

// Pairwise subtract the coefficients
void
subtraction_test(const std::vector<Coefficient>& coefficients)
{
  std::cout << "---------- Subtraction test--------------" << std::endl;
  for (size_t i = 1; i < coefficients.size(); i++) {
    std::cout << coefficients[i - 1].as_float() << " - " << coefficients[i].as_float() << "  =  ";
    const auto res = (coefficients[i - 1] - coefficients[i]).as_float();
    const auto float_res = coefficients[i - 1].as_float() - coefficients[i].as_float();
    if (res != float_res) {
      std::cout << "Error: mismatch! res = " << res << " \t Float res = " << float_res << std::endl;
    } else {
      std::cout << "Ok." << std::endl;
    }
  }
}

// Pairwise multiply the coefficients
void
multiplication_test(const std::vector<Coefficient>& coefficients)
{
  std::cout << "---------- Multiplication test--------------" << std::endl;
  for (size_t i = 1; i < coefficients.size(); i++) {
    std::cout << coefficients[i - 1].as_float() << " * " << coefficients[i].as_float() << "  =  ";
    const auto res = (coefficients[i - 1] * coefficients[i]).as_float();
    const auto float_res = coefficients[i - 1].as_float() * coefficients[i].as_float();
    if (res != float_res) {
      std::cout << "Error: mismatch! res = " << res << " \t Float res = " << float_res << std::endl;
    } else {
      std::cout << "Ok." << std::endl;
    }
  }
}

// Pairwise divide the coefficients
void
division_test(const std::vector<Coefficient>& coefficients)
{
  std::cout << "---------- Division test--------------" << std::endl;
  for (size_t i = 1; i < coefficients.size(); i++) {
    std::cout << coefficients[i - 1].as_float() << " / " << coefficients[i].as_float() << "  =  ";
    const auto res = (coefficients[i - 1] / coefficients[i]).as_float();
    const auto float_res = coefficients[i - 1].as_float() / coefficients[i].as_float();
    if (res != float_res) {
      std::cout << "Error: mismatch! res = " << res << " \t Float res = " << float_res << std::endl;
    } else {
      std::cout << "Ok." << std::endl;
    }
  }
}

int
main()
{
  const size_t num_coefficients = 10;
  const auto coefficients = generate_random_coefficients(num_coefficients);

  std::cout << "---------- Original Coefficients --------------" << std::endl;
  print_coefficients(coefficients);

  subtraction_test(coefficients);
  multiplication_test(coefficients);
  division_test(coefficients);

  return 0;
}