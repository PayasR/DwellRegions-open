#include <random>
#include <iostream>

#include "disk.hpp"
#include "point.hpp"

using DwellRegions::Point;
using DwellRegions::Disk;

auto generate_random_points(size_t num_points) {
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(0.0, 180.0);
    std::vector<Point> points;

    for (size_t i = 0; i < num_points; i++) {
        // Use dis to transform the random unsigned int generated by gen into a
        // double in [1, 2). Each call to dis(gen) generates a new random double
        points.emplace_back( DwellRegions::Point_from_lon_lat(dis(gen), dis(gen)) );
    }

    return points;
}

auto
compute_welzl(const std::vector<Point>& points)
{
    return DwellRegions::welzl(points, {});
}

auto
compute_brute_force_SEC(const std::vector<Point>& points)
{
    return DwellRegions::brute_force_SEC(points);
}

int
main()
{
    const size_t num_points = 10;
    auto points = generate_random_points(num_points);
    auto SEC_points = compute_welzl(points);

    if (!SEC_points.has_value()) {
        std::cerr << "ERROR: Welzl's implementation returned null, no disk computed." << std::endl;
        return(1);
    }
    else {
       	std::cout << "Welzl's output: " << SEC_points.value().get_radius() <<	std::endl;
    }

    SEC_points = compute_brute_force_SEC(points);

    if (!SEC_points.has_value()) {
        std::cerr << "ERROR: Brute force algorithm  returned null, no disk computed." << std::endl;
        return(1);
    }
    else {
        std::cout << "Brute force output: " << SEC_points.value().get_radius() << std::endl;
    }

    return 0;
}
